.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "SYNCBOX-EDIT" "1" "May, 2024" "syncbox-edit 1.0.0" "SysEx configuration editor"
.hy
.SH NAME
.PP
syncbox-edit - Read, write and update syncbox configuration.
.SH SYNOPSIS
.PP
syncbox-edit [-h] [-c | -s | -r | -u] [-l] [-p PORT | -t UART] [-i INC]
[-e SET] [file]
.SH OPTIONS
.TP
-c, \[en]create
Create Configuration File
.RS
.PP
Create a configuration containing the selected sections and write it to
the nominated filename or stdout if file is omitted.
.RE
.TP
-s, \[en]send
Send configuration to device
.RS
.PP
Send the sections specified to the device over SysEx.
If an input file is provided, all sections in the file will be sent
along with any sections explicitly included on the command line.
If no file is provided, only those sections listed will be sent.
.RE
.TP
-r, \[en]receive
Receive Configuration
.RS
.PP
Request the nominated sections from an attached syncbox and output to a
configuration file.
.RE
.TP
-u, \[en]update
Update Configuration
.RS
.PP
Read the requested sections as per receive mode then set any required
values and send the resulting configuration.
.RE
.TP
-i INC
Specify sections to include
.RS
.PP
Specify a comma-separated list of sections that should be included in
the operating mode.
.IP \[bu] 2
general: General configuration
.IP \[bu] 2
ck: DIN pin 3 \[lq]clock\[rq]
.IP \[bu] 2
rs: DIN pin 1 \[lq]run/stop\[rq]
.IP \[bu] 2
fl: DIN pin 5 \[lq]continue\[rq] or \[lq]fill\[rq]
.IP \[bu] 2
g1: Gate output 1
.IP \[bu] 2
g2: Gate output 2
.IP \[bu] 2
g3: Gate output 3
.IP \[bu] 2
src: include all sections present in input file (default)
.IP \[bu] 2
all: include all configuration sections
.RE
.TP
-e SET
Specify setting
.RS
.PP
Option -e enables override of a specific setting using the form:
section.key=value and may be specified multiple times.
Section may be omitted for general configuration settings.
.IP \[bu] 2
general.tempo: Set internal tempo in bpm
.IP \[bu] 2
general.inertia: Set run/stop inertia in ms
.IP \[bu] 2
general.channel: Set MIDI basic channel, 1-16
.IP \[bu] 2
general.mode: Set MIDI mode \[lq]omni on\[rq] or \[lq]omni off\[rq]
.IP \[bu] 2
general.fusb: USB cable filter (See \[lq]Cable Filter Flags\[rq])
.IP \[bu] 2
general.fmidi: MIDI cable filter (See \[lq]Cable Filter Flags\[rq])
.IP \[bu] 2
general.triglen: Trigger length in ms
.IP \[bu] 2
OUT.flags: Output flags (See \[lq]Output Flags\[rq])
.IP \[bu] 2
OUT.divisor: Output clock divisor (96ppq units)
.IP \[bu] 2
OUT.offset: Output clock offset (96ppq units)
.IP \[bu] 2
OUT.note: Output MIDI note/control number
.PP
Where OUT is one of ck, rs, fl, g1, g2, g3.
.RE
.TP
-l, \[en]list
List Available MIDI Ports
.TP
-p, -t
Select MIDI or UART port
.RS
.PP
By default, the first MIDI device will be used.
To specify a different device, use the name provided by a list output.
.PP
Note: receive and update modes only work over the syncbox USB interface.
When using the MIDI interface, SysEx requests will time out.
.PP
To send updates over a serial port, use the -t option with mode
\[en]send to specify the serial port device.
.RE
.SH EXAMPLES
.SS Write default configuration to file \[lq]config.json\[rq]
.IP
.nf
\f[C]
$ syncbox-edit -c config.json
Wrote default configuration to: config.json
\f[R]
.fi
.SS Create g3 configuration, overriding divisor and flags
.IP
.nf
\f[C]
$ syncbox-edit -c -i g3 -e g3.flags=clock -e g3.divisor=beat
{
 \[dq]output\[dq]: {
  \[dq]g3\[dq]: {
   \[dq]flags\[dq]: \[dq]clock\[dq],
   \[dq]divisor\[dq]: \[dq]1 beat\[dq],
   \[dq]offset\[dq]: 0,
   \[dq]note\[dq]: 0
  }
 }
}
\f[R]
.fi
.SS Send all sections in \[lq]config.json\[rq]
.IP
.nf
\f[C]
$ syncbox-edit -s config.json
\f[R]
.fi
.SS Send a default configuration
.IP
.nf
\f[C]
$ syncbox-edit -s -i all
\f[R]
.fi
.SS Send g1 from \[lq]config.json\[rq], with an amendment
.IP
.nf
\f[C]
$ syncbox-edit -s -i g1 -e g1.offset=3 config.json
\f[R]
.fi
.SS Receive g2 configuration from syncbox
.IP
.nf
\f[C]
$ syncbox-edit -r -i g2
{
 \[dq]output\[dq]: {
  \[dq]g2\[dq]: {
   \[dq]flags\[dq]: \[dq]note\[dq],
   \[dq]divisor\[dq]: 0,
   \[dq]offset\[dq]: 0,
   \[dq]note\[dq]: 64
  }
 }
}
\f[R]
.fi
.SS Update g3 divisor
.IP
.nf
\f[C]
$ ./syncbox.py -u -i g3 -e g3.divisor=6
\f[R]
.fi
.SS List available MIDI Ports
.IP
.nf
\f[C]
$ syncbox-edit -l
Available MIDI Ports:
    \[aq]UM-ONE:UM-ONE MIDI 1 20:0\[aq]
    \[aq]Syncbox:Syncbox Sync 24:0\[aq]
\f[R]
.fi
.SS Receive configuration from a specific MIDI port
.IP
.nf
\f[C]
$ syncbox-edit -r -p \[aq]Syncbox:Syncbox Sync 24:0\[aq]
\f[R]
.fi
.SS Send default configuration via USB serial adapter
.IP
.nf
\f[C]
$ syncbox-edit -s -i all -t /dev/ttyUSB0
\f[R]
.fi
.SH FILES
.PP
Device configuration is saved as a JSON encoded object with two
sections: `general' and `output'.
General device configuration is a map containing the following keys and
values:
.IP \[bu] 2
tempo (string): Internal clock tempo in bpm 10 - 300, default: \[lq]120
bpm\[rq]
.IP \[bu] 2
inertia (string): Run/stop inertia in ms 0 - 15.8, default: \[lq]5
ms\[rq]
.IP \[bu] 2
channel (int): Basic MIDI Channel 1-16, default: 1
.IP \[bu] 2
mode (string): MIDI Mode \[lq]omni on\[rq](1) or \[lq]omni off\[rq](3),
default: \[lq]omni on\[rq]
.IP \[bu] 2
fusb (string): 21 bit USB cable filter bitmask, default: \[lq]system
common | note off | note on | controller | realtime\[rq]
.IP \[bu] 2
musb (string): 21 bit MIDI cable filter bitmask, default: \[lq]system
common | note off | note on | controller | realtime\[rq]
.IP \[bu] 2
triglen (string): Trigger length in ms 0-127, default: \[lq]20 ms\[rq]
.PP
The output section contains an output configuration object for each of
the output channels:
.IP \[bu] 2
ck: DIN pin 3 \[lq]clock\[rq]
.IP \[bu] 2
rs: DIN pin 1 \[lq]run/stop\[rq]
.IP \[bu] 2
fl: DIN pin 5 \[lq]continue\[rq] or \[lq]fill\[rq]
.IP \[bu] 2
g1: Gate output 1
.IP \[bu] 2
g2: Gate output 2
.IP \[bu] 2
g3: Gate output 3
.PP
Each output configuration object has the following keys and values:
.IP \[bu] 2
flags (string): 14 bit output flags or integer value
.IP \[bu] 2
divisor (string): 96ppq sync clock divisor 0-32766 *
.IP \[bu] 2
offset (string): 96ppq clock offset 0-16383
.IP \[bu] 2
note (int): MIDI note or controller
.PP
Note: Divisor is halved before sending to syncbox, so odd values will be
effectively truncated to even.
See \[lq]example_configuration.json\[rq] for default output
configuration values.
.SS Cable Filter Flags
.PP
MIDI and USB inputs to syncbox may be independently filtered by
specifying a bitmask of event types in the general configuration.
.PP
Use any combination of the following values:
.IP \[bu] 2
\[lq]default\[rq]: 0x8b2c (common, note, controller, realtime)
.IP \[bu] 2
\[lq]system common\[rq]: 0x2c (includes 1, 2 and 3 byte common)
.IP \[bu] 2
\[lq]misc function\[rq]: 0x1 [*]
.IP \[bu] 2
\[lq]cable events\[rq]: 0x2 [*]
.IP \[bu] 2
\[lq]2 byte system common\[rq]: 0x4
.IP \[bu] 2
\[lq]3 byte system common\[rq]: 0x8
.IP \[bu] 2
\[lq]sysex start\[rq]: 0x10 [*]
.IP \[bu] 2
\[lq]1 byte system common\[rq]: 0x20
.IP \[bu] 2
\[lq]sysex ends with 2 bytes\[rq]: 0x40 [*]
.IP \[bu] 2
\[lq]sysex ends with 3 bytes\[rq]: 0x80 [*]
.IP \[bu] 2
\[lq]note off\[rq]: 0x100
.IP \[bu] 2
\[lq]note on\[rq]: 0x200
.IP \[bu] 2
\[lq]poly pressure\[rq]: 0x400
.IP \[bu] 2
\[lq]controller\[rq]: 0x800
.IP \[bu] 2
\[lq]program change\[rq]: 0x1000
.IP \[bu] 2
\[lq]channel pressure\[rq]: 0x2000
.IP \[bu] 2
\[lq]bender\[rq]: 0x4000
.IP \[bu] 2
\[lq]realtime\[rq]: 0x8000
.IP \[bu] 2
Note: SysEx messages are always received by syncbox.
Misc function, cable events and any undefined bits are ignored.
.SS Output Flags
.PP
The behaviour of an output is determined by a combination of the
following flags:
.IP \[bu] 2
\[lq]clock\[rq]: Output is switched on and off by the internal 96ppq
reference according to the divisor and offset configuration (subject to
inertia setting)
.IP \[bu] 2
\[lq]runstop\[rq]: Output is set on reception of a MIDI start message
and cleared on reception of MIDI stop (subject to inertia setting)
.IP \[bu] 2
\[lq]continue\[rq]: Output is triggered for triglen milliseconds on
reception of a MIDI continue message
.IP \[bu] 2
\[lq]note\[rq]: Output is set and cleared on reception of Note on/off
messages matching the configured note value
.IP \[bu] 2
\[lq]trig\[rq]: Output is cleared triglen milliseconds after being set
.IP \[bu] 2
\[lq]divisor\[rq]: The output\[cq]s divisor value is adjusted on
reception of a controller matching the configured note value
.IP \[bu] 2
\[lq]offset\[rq]: The output\[cq]s offset value is adjusted on reception
of a controller matching the configured note value
.IP \[bu] 2
\[lq]controller\[rq]: The output is set when a matching controller is
received with a value of 64 or greater, and cleared if the value is less
than 64.
.IP \[bu] 2
\[lq]run mask\[rq]: The output is held clear while stopped
.PP
Where states overlap, output behaviour depends on the order of reception
of MIDI messages relative to the internal reference clock.
.SS Divisor/Offset Labels
.PP
Divisors and offsets are specified as multiples of the internal 96ppq
reference clock.
The following flags are available to set standard tempo durations:
.IP \[bu] 2
\[lq]48ppq\[rq]: 2
.IP \[bu] 2
\[lq]korg\[rq]: 2 (alias of \[lq]48ppq\[rq])
.IP \[bu] 2
\[lq]24ppq\[rq]: 4
.IP \[bu] 2
\[lq]roland\[rq]: 4 (alias of \[lq]24ppq\[rq])
.IP \[bu] 2
\[lq]32nd\[rq]: 12
.IP \[bu] 2
\[lq]24th\[rq]: 16
.IP \[bu] 2
\[lq]16th\[rq]: 24
.IP \[bu] 2
\[lq]triplet\[rq]: 32
.IP \[bu] 2
\[lq]8th\[rq]: 48
.IP \[bu] 2
\[lq]6th\[rq]: 64
.IP \[bu] 2
\[lq]beat\[rq]: 96
.IP \[bu] 2
\[lq]quarter\[rq]: 96 (alias of \[lq]beat\[rq])
.IP \[bu] 2
\[lq]half\[rq]: 192
.IP \[bu] 2
\[lq]bar\[rq]: 384
.PP
Multiples are specified by prefixing a label with a multiplier and a
space, eg: \[lq]3 16th\[rq] is equivalent to 72, and \[lq]0.75 Bar\[rq]
is equivalent to \[lq]3 beat\[rq] or 288.
.SH SEE ALSO
.PP
Git repository: <https://github.com/ndf-zz/syncbox>
.SH COPYRIGHT
.PP
Copyright (c) 2024 Nathan Fraser License: MIT
